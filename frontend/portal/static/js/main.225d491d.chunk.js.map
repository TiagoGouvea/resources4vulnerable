{"version":3,"sources":["styles/variables.js","styles/globalStyles.ts","styles/theme.ts","utils/networking.ts","utils/constraints.ts","redux/auth/actions.ts","redux/auth/reducers.ts","redux/consumption/actions.ts","redux/consumption/reducers.ts","redux/family/actions.ts","redux/family/reducers.ts","redux/rootReducer.ts","redux/store.ts","pages/dashboard/styles.tsx","pages/dashboard/index.tsx","pages/index.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GlobalStyles","createGlobalStyle","props","theme","colors","background","breakpoints","styleBreakpoints","xs","sm","md","lg","xl","Theme","name","agendaRoomBackground","agendaRoomBorder","variables","spacing","none","default","reduxPersist","localStorage","getItem","parsedReduxPersist","JSON","parse","undefined","parsedAuthRedux","authReducer","doLoginUser","axios","create","baseURL","process","REACT_APP_ENV_BACKEND_HOST","headers","token","Authorization","createAction","doLoginUserSuccess","doLoginUserFailed","doGetToken","doGetTokenSuccess","doGetTokenFailed","createReducer","loading","toString","state","error","action","payload","refreshToken","user","doSaveConsumption","doSaveConsumptionSuccess","doSaveConsumptionFailed","registered","push","doGetFamily","doGetFamilySuccess","doGetFamilyFailed","item","rootReducer","combineReducers","consumptionReducer","familyReducer","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","PageContainer","styled","div","DashboardPage","Router","component","App","useEffect","moment","updateLocale","momentBR","store","createStore","applyMiddleware","thunk","persistor","persistStore","getStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.225d491d.chunk.js","sourcesContent":["// Ref: https://ant.design/docs/react/customize-theme#Ant-Design-Less-variables\nmodule.exports = {\n  '@primary-color': '#1890ff', // primary color for all components\n  '@link-color': '#1890ff', // link color\n  '@success-color': '#52c41a', // success state color\n  '@warning-color': '#faad14', // warning state color\n  '@error-color': '#f5222d', // error state color\n  '@font-size-base': '14px', // major text font size\n  '@heading-color': 'rgba(0, 0, 0, 0.85)', // heading text color\n  '@text-color': 'rgba(0, 0, 0, 0.65)', // major text color\n  '@text-color-secondary': 'rgba(0, 0, 0, 0.45)', // secondary text color\n  '@disabled-color': 'rgba(0, 0, 0, 0.25)', // disable state color\n  '@border-radius-base': '4px', // major border radius\n  '@border-color-base': '#d9d9d9', // major border color\n  '@box-shadow-base': '0 2px 8px rgba(0, 0, 0, 0.15)', // major shadow for layers\n  '@table-background': '#ffffff',\n  '@table-hover-background': '#f7fff1'\n};\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  html, #root {\n    width: 100%;\n    height: 100%;\n    background-color: ${(props) => props.theme.colors.background};\n    scroll-behavior: smooth;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  #root {\n    > * {      \n      &:first-child, [role~=\"group\"], [tabindex=\"-1\"] {\n        height: 100%;\n      }\n    }\n  }\n\n  body {\n    width: 100%;\n    height: 100%;    \n    overflow-x: hidden;\n  }\n`;\n","import variables from './variables';\n\nexport const breakpoints = {\n  mobile: 576,\n  tablet: 768,\n  medium: 992,\n  laptop: 1025,\n  desktop: 1440\n};\n\nexport const styleBreakpoints = {\n  xs: `${breakpoints.mobile}px`,\n  sm: `${breakpoints.tablet}px`,\n  md: `${breakpoints.medium}px`,\n  lg: `${breakpoints.laptop}px`,\n  xl: `${breakpoints.desktop}px`\n};\n\nconst colors = {\n  background: '#f6f7f8',\n  agendaRoomBackground: '#999',\n  agendaRoomBorder: '#000',\n  ...variables\n};\n\nexport type SpacingList = {\n  /**\n   * 0px\n   */\n  none: string;\n  /**\n   * 4px\n   */\n  xs: string;\n  /**\n   * 8px\n   */\n  sm: string;\n  /**\n   * 16px\n   */\n  default: string;\n  /**\n   * 32px\n   */\n  md: string;\n  /**\n   * 48px\n   */\n  lg: string;\n  /**\n   * 72px\n   */\n  xl: string;\n};\n\nexport const spacing: SpacingList = {\n  none: '0px',\n  xs: '4px',\n  sm: '8px',\n  default: '16px',\n  md: '32px',\n  lg: '48px',\n  xl: '72px'\n};\n\nexport type SpacingName = keyof SpacingList;\n\nexport const Theme = {\n  name: 'Default',\n  colors,\n  breakpoints: styleBreakpoints,\n  spacing\n};\n\nexport type AppTheme = typeof Theme;\n","import axios from 'axios';\nimport { TokenResponse } from '../interfaces/auth';\nimport { PERSIST_KEY } from './constraints';\nimport { AppState } from '../redux/rootReducer';\n\nconst reduxPersist = localStorage.getItem(`persist:${PERSIST_KEY}`);\nconst parsedReduxPersist = reduxPersist ? JSON.parse(reduxPersist) : undefined;\nconst parsedAuthRedux: AppState['authReducer'] | undefined = parsedReduxPersist\n  ? JSON.parse(parsedReduxPersist.authReducer)\n  : undefined;\n\n/**\n * Default axios instance\n */\nconst backend = axios.create({\n  baseURL: process.env.REACT_APP_ENV_BACKEND_HOST,\n  headers: parsedAuthRedux && parsedAuthRedux.token ? { Authorization: `Bearer ${parsedAuthRedux.token}` } : undefined\n});\n\n/**\n * Set or clear the default Authorization token on request headers\n * @param token JWT token or null\n */\nconst setAuthorization = (token: TokenResponse['token'] | null) => {\n  backend.defaults.headers.common['Authorization'] = token ? `Bearer ${token}` : null;\n};\n\nexport { backend, setAuthorization };\n","export const PERSIST_KEY = 'root';\n\nexport const localStorageConstraints = {\n  SIDEBAR_COLLAPSED: 'sidebar:collapsed'\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport { TokenResponse } from '../../interfaces/auth';\nimport { ThunkResult } from '../store';\nimport { backend, setAuthorization } from '../../utils/networking';\n\n// Simple actions and types\nexport const doLoginUser = createAction<void>('auth/LOGIN_USER');\nexport const doLoginUserSuccess = createAction<TokenResponse>('auth/LOGIN_USER_SUCCESS');\nexport const doLoginUserFailed = createAction<Error | undefined>('auth/LOGIN_USER_FAILED');\nexport const doGetToken = createAction<void>('auth/GET_TOKEN');\nexport const doGetTokenSuccess = createAction<TokenResponse>('auth/GET_TOKEN_SUCCESS');\nexport const doGetTokenFailed = createAction<Error | undefined>('auth/GET_TOKEN_FAILED');\n\n/**\n * Login user thunk action\n */\nexport const requestLoginUser = (email: string, password: string): ThunkResult<void> => {\n  return async (dispatch) => {\n    try {\n      // Start request - starting loading state\n      dispatch(doLoginUser());\n      const response = await backend.post<TokenResponse>('/auth/login', { email, password });\n      if (response && response.data) {\n        // Request finished\n        setAuthorization(response.data.token); // Set base authorization\n        dispatch(doLoginUserSuccess(response.data)); // Dispatch result\n      } else {\n        // Request without response - probably won't happen, but cancel the request\n        dispatch(doLoginUserFailed());\n      }\n    } catch (error) {\n      // Request failed: dispatch error\n      dispatch(doLoginUserFailed(error));\n    }\n  };\n};\n\n/**\n * Token renewal process - call on token expiration and on the return to the app\n */\nexport const requestGetToken = (): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    try {\n      // Start request - starting loading state\n      dispatch(doGetToken());\n      // Getting refresh token from the state\n      const refreshToken = getState().authReducer.refreshToken;\n      if (!refreshToken) {\n        // User never logged\n        dispatch(doGetTokenFailed());\n        return;\n      }\n      const response = await backend.post<TokenResponse>('/auth/token', { refreshToken });\n      if (response && response.data) {\n        // Request finished\n        setAuthorization(response.data.token); // Set base authorization\n        dispatch(doGetTokenSuccess(response.data)); // Dispatch result\n      } else {\n        // Request without response - probably won't happen, but cancel the request\n        dispatch(doGetTokenFailed());\n      }\n    } catch (error) {\n      // Request failed: dispatch error\n      dispatch(doGetTokenFailed(error));\n    }\n  };\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  doLoginUser,\n  doLoginUserSuccess,\n  doLoginUserFailed,\n  doGetToken,\n  doGetTokenSuccess,\n  doGetTokenFailed\n} from './actions';\nimport { User } from '../../interfaces/user';\n\nexport interface AuthReducerState {\n  token?: string;\n  refreshToken?: string;\n  user?: User;\n  loading: boolean;\n  error?: Error;\n}\n\nconst initialState = {\n  loading: false\n};\n\nexport default createReducer<AuthReducerState>(initialState, {\n  [doLoginUser.toString()]: (state: AuthReducerState) => {\n    state.loading = true;\n    state.error = undefined;\n  },\n  [doLoginUserSuccess.toString()]: (state: AuthReducerState, action) => {\n    state.loading = false;\n    state.token = action.payload.token;\n    state.refreshToken = action.payload.refreshToken;\n    state.user = action.payload.user;\n  },\n  [doLoginUserFailed.toString()]: (state: AuthReducerState, action) => {\n    state.loading = false;\n    state.error = action.payload;\n  },\n  [doGetToken.toString()]: (state: AuthReducerState) => {\n    state.loading = true;\n  },\n  [doGetTokenSuccess.toString()]: (state: AuthReducerState, action) => {\n    state.loading = false;\n    state.token = action.payload.token;\n    state.refreshToken = action.payload.refreshToken;\n    state.user = action.payload.user;\n  },\n  [doGetTokenFailed.toString()]: (state: AuthReducerState) => {\n    state.loading = false;\n    // Token failed, log out the user\n    state.token = undefined;\n    state.refreshToken = undefined;\n    state.user = undefined;\n  }\n});\n","import { createAction } from '@reduxjs/toolkit';\nimport { ThunkResult } from '../store';\nimport { backend } from '../../utils/networking';\nimport { Consumption } from '../../interfaces/consumption';\n\n// Simple actions and types\nexport const doSaveConsumption = createAction<void>('consumption/SAVE');\nexport const doSaveConsumptionSuccess = createAction<Consumption>('consumption/SAVE_SUCCESS');\nexport const doSaveConsumptionFailed = createAction<Error | undefined>('consumption/SAVE_FAILED');\n\n/**\n * Save consumption Thunk action\n */\nexport const requestSaveConsumption = (\n  item: Pick<Consumption, 'familyId' | 'nfce' | 'proofImageUrl' | 'value'>,\n  onSuccess?: () => void,\n  onFailure?: (error?: Error) => void\n): ThunkResult<void> => {\n  return async (dispatch) => {\n    try {\n      // Start request - starting loading state\n      dispatch(doSaveConsumption());\n\n      // Request\n      const response = await backend.post<Consumption>(`/consumptions`, item);\n\n      if (response && response.data) {\n        // Request finished\n        dispatch(doSaveConsumptionSuccess(response.data)); // Dispatch result\n        if (onSuccess) onSuccess();\n      } else {\n        // Request without response - probably won't happen, but cancel the request\n        dispatch(doSaveConsumptionFailed());\n        if (onFailure) onFailure();\n      }\n    } catch (error) {\n      // Request failed: dispatch error\n      dispatch(doSaveConsumptionFailed(error));\n      if (onFailure) onFailure(error);\n    }\n  };\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { doSaveConsumption, doSaveConsumptionSuccess, doSaveConsumptionFailed } from './actions';\nimport { Consumption } from '../../interfaces/consumption';\n\nexport interface ConsumptionReducerState {\n  registered: Consumption[];\n  loading: boolean;\n  error?: Error;\n}\n\nconst initialState = {\n  registered: [],\n  loading: false\n};\n\nexport default createReducer<ConsumptionReducerState>(initialState, {\n  // Save actions\n  [doSaveConsumption.toString()]: (state) => {\n    state.loading = true;\n    state.error = undefined;\n  },\n  [doSaveConsumptionSuccess.toString()]: (state, action) => {\n    state.loading = false;\n    state.registered.push(action.payload);\n  },\n  [doSaveConsumptionFailed.toString()]: (state, action) => {\n    state.loading = false;\n    state.error = action.payload;\n  }\n});\n","import { createAction } from '@reduxjs/toolkit';\nimport { ThunkResult } from '../store';\nimport { backend } from '../../utils/networking';\nimport { Family } from '../../interfaces/family';\n\n// Simple actions and types\nexport const doGetFamily = createAction<void>('family/GET');\nexport const doGetFamilySuccess = createAction<Family | Family[]>('family/GET_SUCCESS');\nexport const doGetFamilyFailed = createAction<Error | undefined>('family/GET_FAILED');\n\n/**\n * Get family Thunk action\n */\nexport const requestGetFamily = (nis: string): ThunkResult<void> => {\n  return async (dispatch) => {\n    try {\n      // Start request - starting loading state\n      dispatch(doGetFamily());\n      // Request\n      const response = await backend.get<Family>(`/families`, { params: { nis } });\n      if (response && response.data) {\n        // Request finished\n        dispatch(doGetFamilySuccess(response.data)); // Dispatch result\n      } else {\n        // Request finished, but no item was found\n        dispatch(doGetFamilyFailed());\n      }\n    } catch (error) {\n      // Request failed: dispatch error\n      dispatch(doGetFamilyFailed(error));\n    }\n  };\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { doGetFamily, doGetFamilySuccess, doGetFamilyFailed } from './actions';\nimport { Family } from '../../interfaces/family';\n\nexport interface FamilyReducerState {\n  item?: Family | null; // Family | null | undefined\n  loading: boolean;\n  error?: Error;\n}\n\nconst initialState = {\n  loading: false\n};\n\nexport default createReducer<FamilyReducerState>(initialState, {\n  // Get actions\n  [doGetFamily.toString()]: (state) => {\n    state.loading = true;\n    state.error = undefined;\n    state.item = undefined;\n  },\n  [doGetFamilySuccess.toString()]: (state, action) => {\n    state.loading = false;\n    state.item = action.payload;\n  },\n  [doGetFamilyFailed.toString()]: (state, action) => {\n    state.loading = false;\n    state.error = action.payload;\n    state.item = undefined;\n  }\n});\n","import { combineReducers } from 'redux';\n\n// Reducers\nimport authReducer from './auth/reducers';\nimport consumptionReducer from './consumption/reducers';\nimport familyReducer from './family/reducers';\n\nconst rootReducer = combineReducers({\n  authReducer,\n  consumptionReducer,\n  familyReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk, { ThunkAction, ThunkMiddleware } from 'redux-thunk';\nimport { persistStore, persistReducer, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport rootReducer, { AppState } from './rootReducer';\nimport { PERSIST_KEY } from '../utils/constraints';\n\nexport type Action = { type: string; [key: string]: any };\nexport type ThunkResult<R> = ThunkAction<R, AppState, undefined, Action>;\n\n// Redux-persist config\nconst persistConfig = {\n  key: PERSIST_KEY,\n  storage,\n  blacklist: ['familyReducer']\n} as PersistConfig<AppState>;\n\n// Persist all the reducers\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n/**\n * Generate store and persistor\n */\nexport default () => {\n  const store = createStore(persistedReducer, applyMiddleware(thunk as ThunkMiddleware<AppState, Action>));\n  const persistor = persistStore(store);\n  return { store, persistor };\n};\n","import styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import React from 'react';\nimport { PageHeader, Card, Button, Col, Row } from 'antd';\nimport { PageContainer } from './styles';\n\n/**\n * Dashboard page component\n * @param props component props\n */\nexport const DashboardPage: React.FC<{}> = (props) => {\n  return <PageContainer></PageContainer>;\n};\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\n// Pages\nimport { DashboardPage } from './dashboard';\n\n/**\n * Router component\n * @param props router props\n */\nexport const Router: React.FC<{}> = (props) => {\n  return (\n    <BrowserRouter>\n      <Route component={DashboardPage} />\n    </BrowserRouter>\n  );\n};\n","import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport momentBR from 'moment/locale/pt-br';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { GlobalStyles } from './styles/globalStyles';\nimport { Theme } from './styles/theme';\nimport getStore from './redux/store';\n\nimport { Router } from './pages';\n\nimport 'antd/dist/antd.css';\n\n/**\n * Base React application component\n */\nconst App = () => {\n  useEffect(() => {\n    moment.updateLocale('pt-br', momentBR);\n  }, []);\n  const { store, persistor } = getStore();\n  return (\n    <ThemeProvider theme={Theme}>\n      <GlobalStyles />\n      <Provider store={store}>\n        <PersistGate persistor={persistor} loading={null}>\n          <Router />\n        </PersistGate>\n      </Provider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/**\n * Refister valid service worker\n * @param swUrl service worker path\n * @param config config object\n */\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check service worker function\n * @param swUrl service worker path\n * @param config config object\n */\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\n/**\n * Register function\n * @param config config object\n */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Unregister function\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}